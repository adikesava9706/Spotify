import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import pickle

# 1. Load the CSV (adjust path as needed)
df = pd.read_csv('cleaned_dataset.csv')

# 2. Preprocessing
df.drop_duplicates(inplace=True)
print("Missing values:\n", df.isnull().sum())

# 3. Feature engineering
df['ER']  = df['stream_completions'] / df['play_button_clicks']
df['CPS'] = df['marketing_spend'] / df['stream_count']
df['SCR'] = df['stream_completions'] / df['stream_count'] * 100

# 4. Exploratory plots
# 4a. Correlation heatmap
corr = df.corr()
plt.figure(figsize=(10,8))
plt.imshow(corr, cmap='viridis', aspect='auto')
plt.colorbar()
plt.xticks(range(len(corr)), corr.columns, rotation=90)
plt.yticks(range(len(corr)), corr.columns)
plt.title('Correlation Matrix')
plt.tight_layout()
plt.show()

# 4b. Scatter: playlist_additions vs stream_count
plt.figure(figsize=(8,6))
plt.scatter(df['playlist_additions'], df['stream_count'], alpha=0.5)
plt.xlabel('Playlist Additions')
plt.ylabel('Stream Count')
plt.title('Playlist Additions vs. Stream Count')
plt.tight_layout()
plt.show()

# 5. Prepare data for modeling
features = ['playlist_additions', 'play_button_clicks', 'stream_completions', 'SCR', 'artist_popularity']
X = df[features]
y = df['stream_count']

# 6. Split & scale
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test  = scaler.transform(X_test)

# 7. Train Linear Regression
model = LinearRegression()
model.fit(X_train, y_train)

# 8. Predict & evaluate
y_pred = model.predict(X_test)
mae  = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2   = r2_score(y_test, y_pred)
print(f"MAE: {mae:.2f}")
print(f"RMSE: {rmse:.2f}")
print(f"RÂ²: {r2:.3f}")

# 9. Residual plot
residuals = y_test - y_pred
plt.figure(figsize=(8,6))
plt.scatter(y_pred, residuals, alpha=0.5)
plt.axhline(0, linestyle='--')
plt.xlabel('Predicted')
plt.ylabel('Residuals')
plt.title('Residuals vs Predicted')
plt.tight_layout()
plt.show()

# 10. Save model + scaler
with open('spotify_model.pkl', 'wb') as f:
    pickle.dump({'model': model, 'scaler': scaler}, f)
print("Saved spotify_model.pkl")
